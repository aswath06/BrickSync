import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Alert,
  Platform,
  ActivityIndicator,
} from 'react-native';
import { moderateScale } from './utils/scalingUtils';
import { getToken } from '../services/authStorage';
import { Picker } from '@react-native-picker/picker';
import DateTimePicker, { DateTimePickerEvent } from '@react-native-community/datetimepicker';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RouteProp } from '@react-navigation/native';

type RootStackParamList = {
  AddUser: undefined;
};

type AddUserPageNavigationProp = NativeStackNavigationProp<RootStackParamList, 'AddUser'>;
type AddUserPageRouteProp = RouteProp<RootStackParamList, 'AddUser'>;

interface Props {
  navigation: AddUserPageNavigationProp;
  route: AddUserPageRouteProp;
}

export const AddUserPage: React.FC<Props> = ({ navigation }) => {
  const [userid, setUserId] = useState<number>(0); // autogenerated user ID
  const [name, setName] = useState<string>('');
  const [username, setUsername] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [userrole, setUserRole] = useState<number>(3); // default Customer
  const [phone, setPhone] = useState<string>('');
  const [dateOfBirth, setDateOfBirth] = useState<Date>(new Date());
  const [showDatePicker, setShowDatePicker] = useState<boolean>(false);
  const [gender, setGender] = useState<'Male' | 'Female' | 'Other'>('Male');
  const [loading, setLoading] = useState<boolean>(false);

  // Generate a random userid on component mount
  useEffect(() => {
    const min = 9999999999;
    const max = 9999999999999;
    const randomUserId = Math.floor(Math.random() * (max - min + 1)) + min;
    setUserId(randomUserId);
  }, []);

  const validateInputs = () => {
    if (!name.trim() || !username.trim() || !email.trim() || !password || !phone.trim()) {
      Alert.alert('Validation Error', 'All fields are required.');
      return false;
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      Alert.alert('Validation Error', 'Invalid email format.');
      return false;
    }
    if (!/^\d{10}$/.test(phone)) {
      Alert.alert('Validation Error', 'Phone must be 10 digits.');
      return false;
    }
    return true;
  };

  const handleAddUser = async () => {
    if (!validateInputs()) return;

    try {
      setLoading(true);
      const token = await getToken();
      if (!token) {
        setLoading(false);
        return Alert.alert('Error', 'User not authenticated');
      }

      const payload = {
        userid, // autogenerated user ID
        name,
        username,
        email,
        password,
        userrole,
        phone,
        balance: 0,
        advance: 0,
        dateOfBirth: dateOfBirth.toISOString().split('T')[0],
        gender,
        statements: [] as any[],
      };

      const response = await fetch('https://bricksyncback.onrender.com/api/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      const resData = await response.json();
      if (!response.ok) {
        console.error('Server error:', resData);
        throw new Error(resData.message || 'Failed to add user');
      }

      Alert.alert('Success', 'User added successfully');
      navigation.goBack();
    } catch (err: any) {
      console.error('❌ Add user failed:', err);
      Alert.alert('Error', err.message || 'Failed to add user');
    } finally {
      setLoading(false);
    }
  };

  const handleDateChange = (event: DateTimePickerEvent, selectedDate?: Date) => {
    setShowDatePicker(Platform.OS === 'ios');
    if (selectedDate) setDateOfBirth(selectedDate);
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>Add New User</Text>

      <TextInput
        style={styles.input}
        placeholder="Name"
        placeholderTextColor="#999"
        value={name}
        onChangeText={setName}
      />

      <TextInput
        style={styles.input}
        placeholder="Username"
        placeholderTextColor="#999"
        value={username}
        onChangeText={setUsername}
      />

      <TextInput
        style={styles.input}
        placeholder="Email"
        placeholderTextColor="#999"
        keyboardType="email-address"
        value={email}
        onChangeText={setEmail}
      />

      <TextInput
        style={styles.input}
        placeholder="Password"
        placeholderTextColor="#999"
        secureTextEntry
        value={password}
        onChangeText={setPassword}
      />

      <Text style={styles.label}>User Role</Text>
      <View style={styles.pickerContainer}>
        <Picker selectedValue={userrole} onValueChange={(itemValue) => setUserRole(itemValue)}>
          <Picker.Item label="Customer" value={3} />
          <Picker.Item label="Driver" value={2} />
          <Picker.Item label="Admin" value={1} />
        </Picker>
      </View>

      <TextInput
        style={styles.input}
        placeholder="Phone"
        placeholderTextColor="#999"
        keyboardType="phone-pad"
        value={phone}
        onChangeText={setPhone}
      />

      <Text style={styles.label}>Date of Birth</Text>
      <TouchableOpacity style={styles.datePickerButton} onPress={() => setShowDatePicker(true)}>
        <Text style={styles.datePickerText}>{dateOfBirth.toISOString().split('T')[0]}</Text>
      </TouchableOpacity>
      {showDatePicker && (
        <DateTimePicker
          value={dateOfBirth}
          mode="date"
          display="default"
          onChange={handleDateChange}
          maximumDate={new Date()}
        />
      )}

      <Text style={styles.label}>Gender</Text>
      <View style={styles.pickerContainer}>
        <Picker
          selectedValue={gender}
          onValueChange={(value) => setGender(value as 'Male' | 'Female' | 'Other')}
        >
          <Picker.Item label="Male" value="Male" />
          <Picker.Item label="Female" value="Female" />
          <Picker.Item label="Other" value="Other" />
        </Picker>
      </View>

      <TouchableOpacity
        style={[styles.button, loading && { opacity: 0.7 }]}
        onPress={handleAddUser}
        disabled={loading}
      >
        {loading ? <ActivityIndicator color="#fff" /> : <Text style={styles.buttonText}>Add User</Text>}
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: moderateScale(16),
    backgroundColor: '#F9F9F9',
  },
  title: {
    fontSize: moderateScale(24),
    fontWeight: 'bold',
    marginBottom: moderateScale(24),
    textAlign: 'center',
    color: '#000',
  },
  label: {
    fontSize: moderateScale(16),
    fontWeight: 'bold',
    marginBottom: moderateScale(8),
    color: '#000',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: moderateScale(8),
    padding: moderateScale(12),
    marginBottom: moderateScale(16),
    backgroundColor: '#fff',
    color: '#000',
  },
  pickerContainer: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: moderateScale(8),
    marginBottom: moderateScale(16),
    backgroundColor: '#fff',
  },
  datePickerButton: {
    padding: moderateScale(12),
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: moderateScale(8),
    marginBottom: moderateScale(16),
    backgroundColor: '#fff',
  },
  datePickerText: {
    color: '#000',
  },
  button: {
    backgroundColor: '#007bff',
    padding: moderateScale(16),
    borderRadius: moderateScale(8),
    alignItems: 'center',
    marginTop: moderateScale(16),
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: moderateScale(16),
  },
});
